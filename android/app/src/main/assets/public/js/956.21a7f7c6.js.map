{"version":3,"file":"js/956.21a7f7c6.js","mappings":"sMACA,SAASA,EAAQC,GACb,MAAMC,EAAQD,EAAKE,MAAM,KAAKC,OAAOC,GAAiB,MAATA,GACvCC,EAAW,GAWjB,OAVAJ,EAAMK,QAAQF,IACG,OAATA,GACAC,EAASE,OAAS,GACgB,OAAlCF,EAASA,EAASE,OAAS,GAC3BF,EAASG,MAGTH,EAASI,KAAKL,KAGfC,EAASK,KAAK,IACzB,CACA,SAASC,EAAaC,EAAQC,GAC1BD,EAASb,EAAQa,GACjBC,EAAWd,EAAQc,GACnB,MAAMC,EAASF,EAAOV,MAAM,KACtBa,EAASF,EAASX,MAAM,KAC9B,OAAQU,IAAWC,GACfC,EAAOE,MAAM,CAACC,EAAOC,IAAUD,IAAUF,EAAOG,GACxD,CACO,MAAMC,UAAsB,KAC/B,WAAAC,GACIC,SAASC,WACTC,KAAKC,WAAa,EAClBD,KAAKE,QAAU,OACfF,KAAKG,WAAa,CAAC,MAAO,MAAO,SACrC,CACA,YAAMC,GACF,QAAiBC,IAAbL,KAAKM,IACL,OAAON,KAAKM,IAEhB,KAAM,cAAeC,QACjB,MAAMP,KAAKQ,YAAY,0CAE3B,OAAO,IAAIC,QAAQ,CAACjC,EAASkC,KACzB,MAAMC,EAAUC,UAAUC,KAAKb,KAAKE,QAASF,KAAKC,YAClDU,EAAQG,gBAAkBlB,EAAcmB,UACxCJ,EAAQK,UAAY,KAChBhB,KAAKM,IAAMK,EAAQM,OACnBzC,EAAQmC,EAAQM,SAEpBN,EAAQO,QAAU,IAAMR,EAAOC,EAAQQ,OACvCR,EAAQS,UAAY,KAChBC,QAAQC,KAAK,gBAGzB,CACA,gBAAOP,CAAUQ,GACb,MAAMC,EAAcD,EAAME,OACpBC,EAAKF,EAAYP,OACvB,OAAQM,EAAMI,YACV,KAAK,EACL,KAAK,EACL,QAAS,CACDD,EAAGE,iBAAiBC,SAAS,gBAC7BH,EAAGI,kBAAkB,eAEzB,MAAMC,EAAQL,EAAGM,kBAAkB,cAAe,CAAEC,QAAS,SAC7DF,EAAMG,YAAY,YAAa,SACnC,EAER,CACA,eAAMC,CAAUC,EAAKC,GACjB,MAAMC,GAA6C,IAAlCtC,KAAKG,WAAWoC,QAAQH,GAAc,YAAc,WACrE,OAAOpC,KAAKI,SAASoC,KAAMC,GAChB,IAAIhC,QAAQ,CAACjC,EAASkC,KACzB,MAAMgC,EAAKD,EAAKE,YAAY,CAAC,eAAgBL,GACvCP,EAAQW,EAAGE,YAAY,eACvBC,EAAMd,EAAMK,MAAQC,GAC1BQ,EAAI7B,UAAY,IAAMxC,EAAQqE,EAAI5B,QAClC4B,EAAI3B,QAAU,IAAMR,EAAOmC,EAAI1B,SAG3C,CACA,oBAAM2B,CAAeC,EAAWX,EAAKC,GACjC,MAAMC,GAA6C,IAAlCtC,KAAKG,WAAWoC,QAAQH,GAAc,YAAc,WACrE,OAAOpC,KAAKI,SAASoC,KAAMC,GAChB,IAAIhC,QAAQ,CAACjC,EAASkC,KACzB,MAAMgC,EAAKD,EAAKE,YAAY,CAAC,eAAgBL,GACvCP,EAAQW,EAAGE,YAAY,eACvBjD,EAAQoC,EAAMpC,MAAMoD,GACpBF,EAAMlD,EAAMyC,MAAQC,GAC1BQ,EAAI7B,UAAY,IAAMxC,EAAQqE,EAAI5B,QAClC4B,EAAI3B,QAAU,IAAMR,EAAOmC,EAAI1B,SAG3C,CACA,OAAA6B,CAAQC,EAAWC,GACf,MAAMC,OAA6B9C,IAAZ6C,EAAwBA,EAAQE,QAAQ,eAAgB,IAAM,GACrF,IAAIC,EAAS,GAKb,YAJkBhD,IAAd4C,IACAI,GAAU,IAAMJ,GACJ,KAAZC,IACAG,GAAU,IAAMF,GACbE,CACX,CACA,WAAMC,GACF,MAAMb,QAAazC,KAAKI,SAClBsC,EAAKD,EAAKE,YAAY,CAAC,eAAgB,aACvCZ,EAAQW,EAAGE,YAAY,eAC7Bb,EAAMuB,OACV,CAMA,cAAMC,CAASC,GACX,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MAE/CgF,QAAezD,KAAKmC,UAAU,MAAO,CAAC1D,IAC5C,QAAc4B,IAAVoD,EACA,MAAMC,MAAM,wBAChB,MAAO,CAAEC,KAAMF,EAAMG,QAAUH,EAAMG,QAAU,GACnD,CAMA,eAAMC,CAAUL,GACZ,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MACrD,IAAIkF,EAAOH,EAAQG,KACnB,MAAMG,EAAWN,EAAQM,SACnBC,EAAcP,EAAQQ,UACtBC,QAAuBjE,KAAKmC,UAAU,MAAO,CAAC1D,IACpD,GAAIwF,GAAwC,cAAvBA,EAAcC,KAC/B,MAAMR,MAAM,qCAChB,MAAMS,EAAa1F,EAAK2F,OAAO,EAAG3F,EAAK4F,YAAY,MAC7CC,QAAqBtE,KAAKmC,UAAU,MAAO,CAACgC,IAClD,QAAoB9D,IAAhBiE,EAA2B,CAC3B,MAAMC,EAAcJ,EAAW5B,QAAQ,IAAK,GAC5C,IAAqB,IAAjBgC,EAAoB,CACpB,MAAMC,EAAgBL,EAAWC,OAAOG,SAClCvE,KAAKyE,MAAM,CACbhG,KAAM+F,EACNvB,UAAWO,EAAQP,UACnBe,UAAWD,GAEnB,CACJ,CACA,IAAKD,IACDH,EAAOA,EAAKpB,QAAQ,MAAQ,EAAIoB,EAAKhF,MAAM,KAAK,GAAKgF,GAChD3D,KAAK0E,eAAef,IACrB,MAAMD,MAAM,kDAEpB,MAAMiB,EAAMC,KAAKD,MACXE,EAAU,CACZpG,KAAMA,EACNqG,OAAQX,EACRD,KAAM,OACNa,KAAMpB,EAAK3E,OACXgG,MAAOL,EACPM,MAAON,EACPf,QAASD,GAGb,aADM3D,KAAKmC,UAAU,MAAO,CAAC0C,IACtB,CACHK,IAAKL,EAAQpG,KAErB,CAMA,gBAAM0G,CAAW3B,GACb,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MACrD,IAAIkF,EAAOH,EAAQG,KACnB,MAAMG,EAAWN,EAAQM,SACnBK,EAAa1F,EAAK2F,OAAO,EAAG3F,EAAK4F,YAAY,MAC7CM,EAAMC,KAAKD,MACjB,IAAIK,EAAQL,EACZ,MAAMV,QAAuBjE,KAAKmC,UAAU,MAAO,CAAC1D,IACpD,GAAIwF,GAAwC,cAAvBA,EAAcC,KAC/B,MAAMR,MAAM,qCAChB,MAAMY,QAAqBtE,KAAKmC,UAAU,MAAO,CAACgC,IAClD,QAAoB9D,IAAhBiE,EAA2B,CAC3B,MAAMC,EAAcJ,EAAW5B,QAAQ,IAAK,GAC5C,IAAqB,IAAjBgC,EAAoB,CACpB,MAAMC,EAAgBL,EAAWC,OAAOG,SAClCvE,KAAKyE,MAAM,CACbhG,KAAM+F,EACNvB,UAAWO,EAAQP,UACnBe,WAAW,GAEnB,CACJ,CACA,IAAKF,IAAa9D,KAAK0E,eAAef,GAClC,MAAMD,MAAM,uDACMrD,IAAlB4D,IAKIN,OAJ0BtD,IAA1B4D,EAAcL,SAA0BE,EAIjCG,EAAcL,QAAUD,EAHxByB,KAAKC,KAAKpB,EAAcL,SAAWyB,KAAK1B,IAKnDqB,EAAQf,EAAce,OAE1B,MAAMH,EAAU,CACZpG,KAAMA,EACNqG,OAAQX,EACRD,KAAM,OACNa,KAAMpB,EAAK3E,OACXgG,MAAOA,EACPC,MAAON,EACPf,QAASD,SAEP3D,KAAKmC,UAAU,MAAO,CAAC0C,GACjC,CAMA,gBAAMS,CAAW9B,GACb,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MAC/CgF,QAAezD,KAAKmC,UAAU,MAAO,CAAC1D,IAC5C,QAAc4B,IAAVoD,EACA,MAAMC,MAAM,wBAChB,MAAM6B,QAAgBvF,KAAK8C,eAAe,YAAa,aAAc,CACjE0C,YAAYC,KAAKhH,KAErB,GAAuB,IAAnB8G,EAAQvG,OACR,MAAM0E,MAAM,8BACV1D,KAAKmC,UAAU,SAAU,CAAC1D,GACpC,CAMA,WAAMgG,CAAMjB,GACR,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MAC/CsF,EAAcP,EAAQQ,UACtBG,EAAa1F,EAAK2F,OAAO,EAAG3F,EAAK4F,YAAY,MAC7CqB,GAASjH,EAAKkH,MAAM,QAAU,IAAI3G,OAClCsF,QAAqBtE,KAAKmC,UAAU,MAAO,CAACgC,IAC5CF,QAAuBjE,KAAKmC,UAAU,MAAO,CAAC1D,IACpD,GAAc,IAAViH,EACA,MAAMhC,MAAM,gCAChB,QAAsBrD,IAAlB4D,EACA,MAAMP,MAAM,yCAChB,IAAKK,GAAyB,IAAV2B,QAA+BrF,IAAhBiE,EAC/B,MAAMZ,MAAM,+BAChB,GAAIK,GAAyB,IAAV2B,QAA+BrF,IAAhBiE,EAA2B,CACzD,MAAME,EAAgBL,EAAWC,OAAOD,EAAW5B,QAAQ,IAAK,UAC1DvC,KAAKyE,MAAM,CACbhG,KAAM+F,EACNvB,UAAWO,EAAQP,UACnBe,UAAWD,GAEnB,CACA,MAAMY,EAAMC,KAAKD,MACXE,EAAU,CACZpG,KAAMA,EACNqG,OAAQX,EACRD,KAAM,YACNa,KAAM,EACNC,MAAOL,EACPM,MAAON,SAEL3E,KAAKmC,UAAU,MAAO,CAAC0C,GACjC,CAKA,WAAMe,CAAMpC,GACR,MAAM,KAAE/E,EAAI,UAAEwE,EAAS,UAAEe,GAAcR,EACjCqC,EAAW7F,KAAKgD,QAAQC,EAAWxE,GACnCgF,QAAezD,KAAKmC,UAAU,MAAO,CAAC0D,IAC5C,QAAcxF,IAAVoD,EACA,MAAMC,MAAM,0BAChB,GAAmB,cAAfD,EAAMS,KACN,MAAMR,MAAM,qCAChB,MAAMoC,QAAsB9F,KAAK+F,QAAQ,CAAEtH,OAAMwE,cACjD,GAAmC,IAA/B6C,EAAcE,MAAMhH,SAAiBgF,EACrC,MAAMN,MAAM,uBAChB,IAAK,MAAMD,KAASqC,EAAcE,MAAO,CACrC,MAAMC,EAAY,GAAGxH,KAAQgF,EAAMyC,OAC7BC,QAAiBnG,KAAKoG,KAAK,CAAE3H,KAAMwH,EAAWhD,cAC9B,SAAlBkD,EAASjC,WACHlE,KAAKsF,WAAW,CAAE7G,KAAMwH,EAAWhD,oBAGnCjD,KAAK4F,MAAM,CAAEnH,KAAMwH,EAAWhD,YAAWe,aAEvD,OACMhE,KAAKmC,UAAU,SAAU,CAAC0D,GACpC,CAMA,aAAME,CAAQvC,GACV,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MAC/CgF,QAAezD,KAAKmC,UAAU,MAAO,CAAC1D,IAC5C,GAAqB,KAAjB+E,EAAQ/E,WAAyB4B,IAAVoD,EACvB,MAAMC,MAAM,0BAChB,MAAM6B,QAAgBvF,KAAK8C,eAAe,YAAa,aAAc,CAAC0C,YAAYC,KAAKhH,KACjFuH,QAAcvF,QAAQ4F,IAAId,EAAQe,IAAIC,MAAOC,IAC/C,IAAIC,QAAkBzG,KAAKmC,UAAU,MAAO,CAACqE,IAI7C,YAHiBnG,IAAboG,IACAA,QAAkBzG,KAAKmC,UAAU,MAAO,CAACqE,EAAI,OAE1C,CACHN,KAAMM,EAAEE,UAAUjI,EAAKO,OAAS,GAChCkF,KAAMuC,EAASvC,KACfa,KAAM0B,EAAS1B,KACfC,MAAOyB,EAASzB,MAChBC,MAAOwB,EAASxB,MAChBC,IAAKuB,EAAShI,SAGtB,MAAO,CAAEuH,MAAOA,EACpB,CAMA,YAAMW,CAAOnD,GACT,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MACrD,IAAIgF,QAAezD,KAAKmC,UAAU,MAAO,CAAC1D,IAI1C,YAHc4B,IAAVoD,IACAA,QAAezD,KAAKmC,UAAU,MAAO,CAAC1D,EAAO,OAE1C,CACHyG,KAAgB,OAAVzB,QAA4B,IAAVA,OAAmB,EAASA,EAAMhF,OAASA,EAE3E,CAMA,UAAM2H,CAAK5C,GACP,MAAM/E,EAAOuB,KAAKgD,QAAQQ,EAAQP,UAAWO,EAAQ/E,MACrD,IAAIgF,QAAezD,KAAKmC,UAAU,MAAO,CAAC1D,IAI1C,QAHc4B,IAAVoD,IACAA,QAAezD,KAAKmC,UAAU,MAAO,CAAC1D,EAAO,YAEnC4B,IAAVoD,EACA,MAAMC,MAAM,yBAChB,MAAO,CACHQ,KAAMT,EAAMS,KACZa,KAAMtB,EAAMsB,KACZC,MAAOvB,EAAMuB,MACbC,MAAOxB,EAAMwB,MACbC,IAAKzB,EAAMhF,KAEnB,CAMA,YAAMmI,CAAOpD,SACHxD,KAAK6G,MAAMrD,GAAS,EAE9B,CAMA,UAAMsD,CAAKtD,GACP,OAAOxD,KAAK6G,MAAMrD,GAAS,EAC/B,CACA,wBAAMuD,GACF,MAAO,CAAEC,cAAe,UAC5B,CACA,sBAAMC,GACF,MAAO,CAAED,cAAe,UAC5B,CAOA,WAAMH,CAAMrD,EAAS0D,GAAW,GAC5B,IAAI,YAAEC,GAAgB3D,EACtB,MAAM,GAAE4D,EAAE,KAAEC,EAAMpE,UAAWqE,GAAkB9D,EAC/C,IAAK4D,IAAOC,EACR,MAAM3D,MAAM,qCAGXyD,IACDA,EAAcG,GAElB,MAAMC,EAAWvH,KAAKgD,QAAQsE,EAAeD,GACvCG,EAASxH,KAAKgD,QAAQmE,EAAaC,GAEzC,GAAIG,IAAaC,EACb,MAAO,CACHtC,IAAKsC,GAGb,GAAIpI,EAAamI,EAAUC,GACvB,MAAM9D,MAAM,wCAGhB,IAAI+D,EACJ,IACIA,QAAczH,KAAKoG,KAAK,CACpB3H,KAAM2I,EACNnE,UAAWkE,GAEnB,CACA,MAAOX,GAEH,MAAMkB,EAAmBN,EAAGzI,MAAM,KAClC+I,EAAiBzI,MACjB,MAAMuI,EAASE,EAAiBvI,KAAK,KAErC,GAAIuI,EAAiB1I,OAAS,EAAG,CAC7B,MAAM2I,QAA0B3H,KAAKoG,KAAK,CACtC3H,KAAM+I,EACNvE,UAAWkE,IAEf,GAA+B,cAA3BQ,EAAkBzD,KAClB,MAAM,IAAIR,MAAM,4CAExB,CACJ,CAEA,GAAI+D,GAAwB,cAAfA,EAAMvD,KACf,MAAM,IAAIR,MAAM,4CAGpB,MAAMkE,QAAgB5H,KAAKoG,KAAK,CAC5B3H,KAAM4I,EACNpE,UAAWqE,IAGTO,EAAatB,MAAO9H,EAAMuG,EAAOC,KACnC,MAAMY,EAAW7F,KAAKgD,QAAQmE,EAAa1I,GACrCgF,QAAezD,KAAKmC,UAAU,MAAO,CAAC0D,IAC5CpC,EAAMuB,MAAQA,EACdvB,EAAMwB,MAAQA,QACRjF,KAAKmC,UAAU,MAAO,CAACsB,KAE3BuB,EAAQ4C,EAAQ5C,MAAQ4C,EAAQ5C,MAAQJ,KAAKD,MACnD,OAAQiD,EAAQ1D,MAEZ,IAAK,OAAQ,CAET,MAAM4D,QAAa9H,KAAKuD,SAAS,CAC7B9E,KAAM4I,EACNpE,UAAWqE,IAGXJ,SACMlH,KAAKsF,WAAW,CAClB7G,KAAM4I,EACNpE,UAAWqE,IAInB,MAAMS,QAAoB/H,KAAK6D,UAAU,CACrCpF,KAAM2I,EACNnE,UAAWkE,EACXxD,KAAMmE,EAAKnE,OAOf,OAJIuD,SACMW,EAAWT,EAAIpC,EAAO4C,EAAQ3C,OAGjC8C,CACX,CACA,IAAK,YAAa,CACd,GAAIN,EACA,MAAM/D,MAAM,mDAEhB,UAEU1D,KAAKyE,MAAM,CACbhG,KAAM2I,EACNnE,UAAWkE,EACXnD,WAAW,IAGXkD,SACMW,EAAWT,EAAIpC,EAAO4C,EAAQ3C,MAE5C,CACA,MAAOuB,GAEP,CAEA,MAAMwB,SAAkBhI,KAAK+F,QAAQ,CACjCtH,KAAM4I,EACNpE,UAAWqE,KACXtB,MACJ,IAAK,MAAMiC,KAAYD,QAEbhI,KAAK6G,MAAM,CACbQ,KAAM,GAAGA,KAAQY,IACjBb,GAAI,GAAGA,KAAMa,IACbhF,UAAWqE,EACXH,eACDD,GAGHA,SACMlH,KAAK4F,MAAM,CACbnH,KAAM4I,EACNpE,UAAWqE,GAGvB,EAEJ,MAAO,CACHpC,IAAKsC,EAEb,CACA,cAAA9C,CAAewD,GACX,IACI,OAAO9C,KAAKC,KAAK6C,KAASA,CAC9B,CACA,MAAOC,GACH,OAAO,CACX,CACJ,EAEJvI,EAAcwI,QAAS,C","sources":["webpack://spending-management/./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","initDb","undefined","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","options","entry","Error","data","content","writeFile","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","btoa","atob","deleteFile","entries","IDBKeyRange","only","depth","match","rmdir","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","all","map","async","e","subEntry","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","writeResult","contents","filename","str","err","_debug"],"sourceRoot":""}