{"version":3,"file":"js/335.cd73838b.js","mappings":"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","sources":["webpack://spending-management/./node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index9.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  let coord;\n  const touchStart = (ev) => {\n    coord = pointerCoord(ev);\n  };\n  const touchEnd = (ev) => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    const endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, { capture: true, passive: true });\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += 50;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = startCoord.x - endCoord.x;\n    const deltaY = startCoord.y - endCoord.y;\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n  const doc = document;\n  const onFocusin = (ev) => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  const onFocusout = (ev) => {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n  var _a, _b;\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (((_b = (_a = input.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'ION-SEARCHBAR') {\n    return;\n  }\n  const el = findClosestIonContent(input);\n  if (el === null) {\n    return;\n  }\n  const timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  }\n  else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n  const doc = document;\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  const inputBlurring = config.getBoolean('inputBlurring', true);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","doc","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","a","addEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","removeEventListener","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","_a","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","enableScrollAssist","footerEl","coord","touchStart","p","touchEnd","endCoord","hasPointerMoved","jsSetFocus","capture","passive","async","scrollData","focus","r","click","window","scrollContentTimeout","scrollContent","undefined","clearTimeout","doubleKeyboardEventListener","g","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","threshold","startCoord","deltaX","x","deltaY","y","PADDING_TIMER_KEY","enableScrollPadding","setScrollPadding","onFocusout","_b","tagName","parentElement","el","timer","setProperty","INPUT_BLURRING","SCROLL_PADDING","startInputShims","config","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","Promise","resolve","c","inputRoot","shadowRoot","querySelector","rmFn","isDateInput","unregisterInput","fn","detail"],"sourceRoot":""}